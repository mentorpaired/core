import json
import os
import re
import requests

from dotenv import load_dotenv
from oauth2_provider.models import AccessToken

from .models import User

load_dotenv()

BACKEND_URL = os.getenv("BACKEND_URL")


def generate_github_access_token(github_client_id, github_client_secret, github_code):
    """
    create an access token to github Oauth2.
    :github_client_id: client_id from https://github.com/settings/developers
    :github_client_secret: client_secret from https://github.com/settings/developers
    :code: code generated by client from http://github.com/login/oauth/authorize/
    :return: json data on user's api
    """
    github_response = requests.post(
        "https://github.com/login/oauth/access_token/",
        data=json.dumps(
            {
                "client_id": github_client_id,
                "client_secret": github_client_secret,
                "code": github_code,
            }
        ),
        headers={"content-type": "application/json"},
    )
    token = re.search(
        r"access_token=([a-zA-Z0-9]+)", github_response.content.decode("utf-8")
    )
    if not token:
        raise PermissionError(github_response)
    return token.group(1)


def retrieve_github_user_info(token):
    """
    using the access token returned by github, retrieve the user's info from the github api
    :token: access token generated from github
    """
    response = requests.get(
        "https://api.github.com/user",
        data={"token": token},
        headers={"Authorization": f"token {token}", "content-type": "application/json"},
    )
    return response.json()


def convert_to_auth_token(client_id, client_secret, backend, token):
    """
    with the previously generated access_token, use the django-rest-framework-social-oauth2
    endpoint `/convert-token/` to authenticate the user and return a django auth token
    :client_id: from OauthToolkit application
    :client_secret: from OauthToolkit application
    :backend: social authentication backend to the user ('github', 'facebook', etc)
    :token: access token generated from the github backend
    :return: django auth token
    """
    params = {
        "grant_type": "convert_token",
        "client_id": client_id,
        "client_secret": client_secret,
        "backend": backend,
        "token": token,
    }
    response = requests.post(f"{BACKEND_URL}/auth/convert-token/", params=params)
    return response.json()


def get_user_from_token(django_auth_token):
    """
    Retrieve the user object given an access token
    :django_auth_token: Oauthtoolkit access token
    :return the user object
    """
    return User.objects.get(
        user_id=AccessToken.objects.get(token=django_auth_token["access_token"]).user_id
    )
